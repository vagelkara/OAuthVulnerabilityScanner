# from identification_manager import *
from plugin_handler import Plugin_handler
from utils.utils import read_settings
from identification_manager import *
import argparse
# from utils.temp_server import start_server

class scanner:
    def __init__(self) -> None:
        self.base_url = settings['base_url']
        self.id_manager = identification_manager(self.base_url)
        self.args = self.parser()

    def parser(self):
        parser = argparse.ArgumentParser()
        parser.add_argument( "--type","-t", default="p", type=str, nargs="*", choices=['a','p'], help="define the type of scan: p[assive],a[ctive]")
        parser.add_argument("--mode","-m", type=str, nargs="*", choices=['P','N','S','RP', 'RD', 'ALL'], help="define the mode of active scan: P[KCE], N[once], S[cope],R[e]P[layScan],R[e]D[irectScan]")
        parser.add_argument("--navigation", type=str, choices=['selenium'], help="select selenium for navigation")
        parser.add_argument("--avoid_replays", type=bool, choices=[True], help="create new auth code for every request")
                
        args = parser.parse_args()
        _type = None
        _mode = None
        self.navigation = args.navigation if args.navigation else None
        self.avoid_replays = args.avoid_replays if args.avoid_replays else False
        if args.type:
            _type = args.type 
            self.passive = None
            self.active = None
            if 'p' in _type:
                self.passive = True
            if 'a' in _type:
                self.active = True
        
        _mode = args.mode
        
        if type(_mode)==list:
            if "ALL" in _mode and len(_mode) > 1:
                _mode.remove("ALL")
        
        if _mode and not self.active:
                reporter.warning("Please provide also the active type to proceed with an active scan")
        elif self.active and not _mode:
                reporter.warning("Please provide mode of active scan")
            

        return _mode
        
    def passive_recon(self):
        success = True
        try:
            self.id_manager.enumerate_server()
        except:
            success = False
        return success

    def active_recon(self,args):
        nav = True if self.navigation else False
        ar = True if self.avoid_replays else False
        self.plugin_handler = Plugin_handler(settings,args,nav,ar)
        self.plugin_handler.active_scan()

    def recon(self):
        
        if self.passive:
            reporter.info("Selected type of scanning: PASSIVE")
            self.passive_recon()
        if self.active:
            reporter.info("Selected type of scanning: ACTIVE")
            reporter.info(f"Selected mode of Active scanning: {self.args}")
            self.active_recon(self.args)

settings = read_settings()
oauth_scanner = scanner()

s = oauth_scanner.recon()



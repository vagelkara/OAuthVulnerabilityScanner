# from identification_manager import *
from plugin_handler import Plugin_handler
from utils.utils import read_settings
from identification_manager import *
import argparse
# from utils.temp_server import start_server

class scanner:
    def __init__(self) -> None:
        self.base_url = settings['base_url']
        self.id_manager = identification_manager(self.base_url)
        self.args = self.parser()

    def parser(self):
        parser = argparse.ArgumentParser()
        parser.add_argument( "--type","-t", default="p", type=str, nargs="*", choices=['a','p'], help="define the type of scan: p[assive],a[ctive]")
        parser.add_argument("--active","-a", default='ALL', type=str, nargs="*", choices=['P','N','S','RP', 'RD', 'ALL'], help="define the mode of active scan: P[KCE], N[once], S[cope],R[e]P[layScan],R[e]D[irectScan]")
        args = parser.parse_args()
        _type = None
        _active = None
        if args.type:
            _type = args.type 
            self.passive = None
            self.active = None
            if 'p' in _type:
                self.passive = True
            if 'a' in _type:
                self.active = True
        
        if self.active and args.active:
            _active = args.active
            if type(_active)==list:
                if "ALL" in _active and len(_active) > 1:
                    _active.remove("ALL")
        return _active
        
    def passive_recon(self):
        success = True
        try:
            self.id_manager.enumerate_server()
        except:
            success = False
        return success

    def active_recon(self,args):
        self.plugin_handler = Plugin_handler(settings,args)
        self.plugin_handler.active_scan()

    def recon(self):
        if self.passive:
            self.passive_recon()
        if self.active:
            self.active_recon(self.args)

settings = read_settings()
oauth_scanner = scanner()

s = oauth_scanner.recon()



from asyncio.log import logger
from pathlib import Path
import requests
from reporter import Reporter
from utils.utils import update_conf,pretty_pring_json,get_input_from_list,read_key_from_config

#create instance for logger
reporter = Reporter("oauth-scanner")
WELL_KNOWN_FILE = Path('./resources/well-known.list')
JWKS_FILE = Path('./resources/jwks.list')

class identification_manager:
    def __init__(self, url):
        self.url = url
        
    def find_well_known(self):
        ''' A function that detects if OAuth Server has implemented a .well-known endpoint'''        
        resp = None
        with WELL_KNOWN_FILE.open() as file:
            lines = file.readlines()
            lines = [line.rstrip() for line in lines]
            for line in lines:
                well_known = self.url + line
                r = requests.get(well_known)
                if self.validate_response(r,"issuer"):
                    reporter.info("Well knonw endpoint found!")
                    update_conf("well_known", well_known)
                    resp = r
                    break
            
        if resp == None:
            reporter.info("Well knonw endpoint wasn't found!")

        return resp
                    
    def validate_response(self, r, value):
        ''' Validate the existence of an endpoint by status code and it's content'''
        x = None
        if r.status_code == 200:
            try:
                x = r.json()
            except:
                reporter.info("Response is not a valid json")
                x = None

        return True if x and x.get(value) else None
                
    def extract_info(self, response):
        '''Extract information from the validated well-known endpoint'''
        info = response.json()
        attr_list = get_input_from_list()
        for at in attr_list:
            self.update_handler(info, at)

    def update_handler(self,info,key):
        '''Update the config.json with the discovered info'''
        x = info.get(key)
        update_conf(key,x) if x else reporter.warning(key)

    def enumerate_server(self):
        '''
        Enumerate server consists:
        1. on documenting the .well-known endpoint's usefull info
        2. on discovering the jwks info in case that it hasn't been detected
        3. enumerate jwks
        4. 
        '''
        
        # 1.
        wk_json = self.find_well_known()
        # TODO implement custom detection in case that endpoint was not detected
        # case glewlwyd
    
        if wk_json:
            reporter.info("A well-known endpoint detected")
            reporter.info("Extracting data...")
            self.extract_info(wk_json)
        else: 
            reporter.info("Well-known endpoint not detected")
    
        # 2. TODO find jwk in case that has not been already reported
        self.find_jwk()
        self.isOpenID()

    def find_jwk(self):
        x = read_key_from_config('jwks_uri')
        issuer = read_key_from_config('issuer')
        if x is None:
            self.search_for_jwk_endpoint(issuer)
        
    def search_for_jwk_endpoint(self,issuer=None):
        ''' A function that searches for a valid jwks endpoint'''        
        resp = None
        issuer if issuer is not None else self.url
        with JWKS_FILE.open() as file:
            lines = file.readlines()
            lines = [line.rstrip() for line in lines]
            for line in lines:
                jwks_url = issuer + line
                r = requests.get(jwks_url)
                if self.validate_response(r,"keys"):
                    reporter.info("JWK endpoint found!")
                    update_conf("jwks_uri", jwks_url)
                    resp = r
                    break
            
        if resp == None:
            reporter.info("JWKs endpoint wasn't found!")

        return resp

    def isOpenID(self):
        self.openid = None
        scopes=read_key_from_config("scopes_supported") if read_key_from_config("scopes_supported") else None
        if scopes is not None:
            if "openid" in scopes:
                self.openid = True
                reporter.info("openId is supported!")



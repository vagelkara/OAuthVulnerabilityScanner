import json
from urllib.parse import urlparse
from pathlib import Path
import requests
import reporter


config = Path('../config.json')
attr_list = Path('./resources/attr.lst')

config.touch(exist_ok=True)

def create_conf():
    '''Not used'''
    dictionary ={}
    
    with config.open(mode='w') as outfile:
        json.dump(dictionary, outfile, indent=2)
        outfile.close()

def read_key_from_config(key,config=config):

    val = None
    with config.open() as cfg:
                
        json_object = json.load(cfg)
        if key in json_object:
            val = json_object[key]
            # print("{} exist in config".format(key))
        cfg.close()
    
    return val 

def update_conf(key,value):
    
    with config.open(mode="r") as jsonFile:
        data = json.load(jsonFile)
    
    data[key] = value

    with config.open(mode="w") as jsonFile:
        json.dump(data, jsonFile, indent=2)

def del_attr(obj):
    for key, value in obj.copy().items():
        if isinstance(obj[key], dict):
            obj[key] = del_attr(obj[key])
        else:
            if value != 'NONE':
                del obj[key]
    return obj

def clear_conf():
    with config.open() as data_file:
        data = json.load(data_file)

    del_attr(data)

    with config.open(mode='w') as data_file:
        data = json.dump(data, data_file)

def pretty_pring_json(json_data):
    '''Used only for debug processes'''
    reporter.info(json.dumps(json_data, indent=2))

def get_input_from_list(file=attr_list):
    txt_file = file.open()
    file_content = txt_file.readlines()
    contents = []
    for f in file_content:
        content = f.split(",")[0]
        contents.append(content)
    txt_file.close()
    return contents

def parser(url):
    '''Not used'''
    parsed = urlparse(url)
    scheme = parsed.scheme
    netloc = parsed.netloc
    path = parsed.path

def repeater():
    enumeration = Path('./resources/enumerate.lst')
    contents = get_input_from_list(enumeration)
    for c in contents:
        url = c + '/.well-known/webfinger'
        r = requests.get(url)
        reporter.info(r.status_code)

def dynamicRegistration():
    '''Update config.json with client_id + secret'''
    pass

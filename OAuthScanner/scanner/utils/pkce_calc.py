import hashlib
import base64
from typing import Tuple


def validate_code_verifier(code) -> str:
    if not 43 <= len(code) <= 128:
        msg = 'Parameter `length` must verify `43 <= length <= 128`.'
        raise ValueError(msg)
    return code


def generate_pkce_pair(code_verifier) -> Tuple[str, str]:
    code_verifier_length = len(code_verifier)
    if not 43 <= code_verifier_length <= 128:
        msg = 'Parameter `code_verifier_length` must verify '
        msg += '`43 <= code_verifier_length <= 128`.'
        raise ValueError(msg)
    code_verifier = validate_code_verifier(code_verifier)
    code_challenge = get_code_challenge(code_verifier)
    return code_challenge


def get_code_challenge(code_verifier: str) -> str:
    
    if not 43 <= len(code_verifier) <= 128:
        msg = 'Parameter `code_verifier` must verify '
        msg += '`43 <= len(code_verifier) <= 128`.'
        raise ValueError(msg)
    hashed = hashlib.sha256(code_verifier.encode('ascii')).digest()
    encoded = base64.urlsafe_b64encode(hashed)
    code_challenge = encoded.decode('ascii')[:-1]
    return code_challenge
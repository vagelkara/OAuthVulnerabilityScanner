from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import json
from pathlib import Path



config = Path('../config.json')
settings_file = Path('../settings.json')

def get_url(url, nav, selector):
    r = 0
    path = '/home/vagelis/.mozilla/firefox/o4cch8kr.main'
    if nav:
        _selector = choose_selector(selector)
        try:
            
            profile = webdriver.FirefoxProfile(path)
            profile.set_preference("dom.webdriver.enabled", False)
            profile.set_preference('useAutomationExtension', False)
            profile.update_preferences()
            desired = DesiredCapabilities.FIREFOX
            desired['loggingPrefs'] = { 'performance':'ALL' }
            driver = webdriver.Firefox(firefox_profile=profile,
                                    desired_capabilities=desired)
            driver.get(url)

            element = WebDriverWait(driver, 100).until(
            EC.presence_of_element_located((By.XPATH, _selector))
            )
            z = driver.get_cookies()
            driver.get(url)
            success = WebDriverWait(driver, 3).until(
            
                EC.presence_of_element_located((By.XPATH, '//*[@id="success"]'))
            )   
            if success:
                r = 200
            else:
                r = 400

            grab_cookie_update_conf(z)
            
        except TimeoutException:
            print("Timed out waiting...!")    
            r = 400
        finally:
            driver.quit()
            return r
    else:
        pass

def choose_selector(selector):
    
    vendor = read_key_from_config("oauth_vendor",settings_file)
    if selector:
        _selector = selector
    elif vendor=="okta":
        _selector = '//*[@id="monitor-details"]|//div[contains(@class, "error-code")]'
    else:
        _selector = '//*[@id="success"]'
    
    return _selector
    
def grab_cookie_update_conf(c):
    cookie_dict = {}
    for i in c:
        cookie_dict[i['name']] = i['value']
    
    update_conf("cookie", cookie_dict)

def update_conf(key,value):
    
    with config.open(mode="r") as jsonFile:
        data = json.load(jsonFile)
    
    data[key] = value

    with config.open(mode="w") as jsonFile:
        json.dump(data, jsonFile, indent=2)

def read_key_from_config(key,config=config):

    val = None
    with config.open() as cfg:
        json_object = json.load(cfg)
        if key in json_object:
            val = json_object[key]
        cfg.close()
    
    return val 
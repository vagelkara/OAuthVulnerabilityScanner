from utils.utils import read_key_from_config
from reporter import Reporter
import wfuzz
import requests
from utils.utils import request_builder
# from utils.temp_server import start_server

reporter = Reporter("authCode")

class OAuthCode:
    
    def __init__(self,settings):
        self.authorization_endpoint = read_key_from_config('authorization_endpoint') 
        self.clientid = settings['client_id'] #if settings.has_key('client_id') else None
        # TODO take a look in case that clientid is not presented
        
    def init_auth_code_test_suite(self):

        reporter.info("Initializing authCode plugin...")
        if self.authorization_endpoint:
            reporter.debug("Authorization_endpoint")
        else:
            reporter.error("Authorization_endpoint")
        
        if self.clientid:
            reporter.debug("Client_id (given in config)")
        else:
            reporter.error("Client_id (not given in config)")

        if self.authorization_endpoint and self.clientid:
            reporter.info ("Check if * is used as redirect URL")
            # start_server()
            url = request_builder(self.authorization_endpoint, self.clientid, "http://127.0.0.1:9999")
            print (url)
            r = requests.get(url=url)
            print (r)

    #subprocess    
    def client_enumeration(self):
        url = request_builder(self.authorization_endpoint, "FUZZ", "FUZ2Z")
        print(url)
        for r in wfuzz.fuzz(url=url, hc=[("303"),("404"),("400")],payloads=[("file",dict(fn="./resources/client_id.txt")),("file",dict(fn="./resources/pattern_redirect_uris.txt"))]):
            reporter.debug(r)
            
    
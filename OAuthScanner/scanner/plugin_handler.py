from urllib.parse import quote_plus

import requests
from reporter import Reporter
from utils.utils import construct_keycloak_cookie, request_builder,read_key_from_config,check_responses
from plugins.authCode import OAuthCode

reporter = Reporter("plugin handler")
class Plugin_handler:

    def __init__(self, settings):
        self.settings = settings
        self.authorization_endpoint = read_key_from_config('authorization_endpoint') 
        self.token_endpoint = read_key_from_config('token_endpoint')
        self.clientid = settings['client_id'] # TODO take a look in case that clientid is not presented
        self.openid = read_key_from_config("openid")


    def pkceScan(self):
        #   Only supported for Keycloak at now need to be extended
        #   @requires user credentials (username/password) in settings.json
        '''Scan to detect PKCE downgrade issues on authorization requests OpenID/OAuth'''
        
        '''
        https://dev-62209633.okta.com/oauth2/v1/authorize?client_id=okta.2b1959c8-bcc0-56eb-a589-cfcfb7422f26&code_challenge=MAa1GuXQ3EKY99Qot-NTOUnJ3in-3at1L8zFApM4nA8&code_challenge_method=S256&nonce=0OerF89cvZwHbnSJ9bQzxJj9FTFFFzH4FSkpHqvlhpAsYQ5luwTruKJz5cqfiZnk&redirect_uri=https%3A%2F%2Fdev-62209633.okta.com%2Fenduser%2Fcallback&response_type=code&state=QicJFWnMk9IwZSlBnLdLn02E6ZSOAVMp83DMqAVH6wXZ4Ogpgpi6SCEFRAESyZvI&scope=openid%20profile%20email%20okta.users.read.self%20okta.users.manage.self%20okta.internal.enduser.read%20okta.internal.enduser.manage
        '''
        code_challenge = 'MAa1GuXQ3EKY99Qot-NTOUnJ3in-3at1L8zFApM4nA8'
        challenge_method = 'S256'
        scope = 'profile email'
        scope += ' openid' if self.openid else ''
        scope_encoded = quote_plus(scope)
        state = 'predictable'
        nonce = 'also_something_predictable'
        redirect_uri = 'http://localhost:1337'
        
        url = request_builder(
                    self.authorization_endpoint, 
                    self.clientid, 
                    redirect_uri, 
                    nonce, 
                    state,
                    challenge_method,
                    code_challenge,
                    scope_encoded)
        
        
        self.auth_cookie = read_key_from_config('keycloak_cookie') 
        print(url)
        if self.auth_cookie is None:
            construct_keycloak_cookie(url)
            self.auth_cookie = read_key_from_config('keycloak_cookie') 
   
        r = requests.get(url, cookies=self.auth_cookie)
       
        new_url = request_builder(
                    self.authorization_endpoint, 
                    self.clientid, 
                    redirect_uri, 
                    nonce, 
                    state,
                    'plaintext',
                    '',
                    scope_encoded)
             
        r_new = requests.get(new_url, cookies=self.auth_cookie)
        d = check_responses(r,r_new)
        equal_key = True if 'equals' in d else False
        if d["status_code"] != True:
            reporter.error('Downgrade Attacks are not applicable')
        elif equal_key:
            if self.openid == True:
                reporter.debug('OpenID PKCE Downgrade Attacks are applicable')
            else:
                reporter.debug('OAuth PKCE Downgrade Attacks are applicable')
        else: # if status code matches, require a login to intercept the cookies
            construct_keycloak_cookie(url)
            reporter.info('Try 1 time to check if cookie has been expired, otherwise Downgrade are not applicable...')


    def codeReplayScan(self):
        # Only applicable in auth_code grant type
        # required fields (client_id/client_secret and authorization_code)
        '''Scan for authorization code replay issues on token requests for OAUTHv2 and OpenID Authorization Code and Hybrid Flows'''

        client_secret = self.settings['client_secret']
        redirect_uri = 'http://localhost:1337'
        auth_code = 'c58d76e8-716d-4024-9870-bfa13dc5f0bd.aefe3e6e-d3a7-4208-ade4-1de04bd0ba47.72ed3982-19d9-4c46-bdf9-57a936eb9d68'
        payload = f"code={auth_code}&client_id={self.clientid}&client_secret={client_secret}&redirect_uri={redirect_uri}&grant_type=authorization_code"
        headers = {'content-type': "application/x-www-form-urlencoded"}
        print(self.token_endpoint)
        print(payload)

        first_response = requests.request("POST", self.token_endpoint, data=payload, headers=headers)
        second_response = requests.request("POST", self.token_endpoint, data=payload, headers=headers)
        
        r = check_responses(first_response, second_response)
        if first_response.ok or second_response.ok:
            if r["status_code"] != True:
                reporter.error("Replay Attacks - Not vulnerable ")
            else:
                if r["equals"] == True:
                    reporter.debug("Replay Attacks - Vulnerability detected")
                else:
                    reporter.info("Replay Attacks - Needs further investigation")
        else:
            reporter.error("Replay Attacks - Invalid code or wrong input")

        pass

    '''@main'''
    def active_scan(self):
        '''Start Active Scan for each OAUTHv2/OpenID vulnerability and common misconfiguration'''
        # authcode = OAuthCode(self.settings)
        # authcode.client_enumeration()
        
        self.pkceScan()
        self.codeReplayScan()
        
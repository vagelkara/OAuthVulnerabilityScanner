from urllib import response
from urllib.parse import quote_plus
from flask import redirect
import requests
from time import sleep
from plugins.redirect_fuzzer import redirect_fuzzer
from reporter import Reporter
from utils.utils import construct_keycloak_cookie, has_key, request_builder,read_key_from_config,check_responses,remove_key_from_conf,construct_cassdoor_cookie
from plugins.authCode import OAuthCode


reporter = Reporter("plugin handler")
class Plugin_handler:

    def __init__(self, settings):
        self.settings = settings
        self.authorization_endpoint = read_key_from_config('authorization_endpoint') 
        self.token_endpoint = read_key_from_config('token_endpoint')
        self.clientid = has_key('client_id',settings)
        if self.clientid is None:
            reporter.error("ClientId not found please provide!")
        self.openid = read_key_from_config("openId")

    '''Active Scan'''
    def openRedirectScan(self):
        '''Scan for open redirect issues on 'redirect_uri' parameter'''
        
        scope = 'profile email'
        scope += ' openid' if self.openid else ''
        scope_encoded = quote_plus(scope)
        state = 'predictable'
        nonce = 'also_something_predictable'
        # redirect_uri = 'http://malserver.com:1337'
        redirect_uri = 'http://malserver.com:9000/callback'
        
        url = request_builder(
                    self.authorization_endpoint, 
                    self.clientid, 
                    redirect_uri, 
                    nonce, 
                    state,
                    '',
                    '',
                    scope_encoded)
        construct_keycloak_cookie(url)
        print(url)
        self.auth_cookie = read_key_from_config('keycloak_cookie')    
        print(self.auth_cookie) 
        rf = redirect_fuzzer(url, self.auth_cookie)
        rf.fuzz()


        pass

    def pkceScan(self):
        #   Only supported for Keycloak at now need to be extended
        #   @requires user credentials (username/password) in settings.json
        '''Scan to detect PKCE downgrade issues on authorization requests OpenID/OAuth'''
        
        '''
        https://dev-62209633.okta.com/oauth2/v1/authorize?client_id=okta.2b1959c8-bcc0-56eb-a589-cfcfb7422f26&code_challenge=MAa1GuXQ3EKY99Qot-NTOUnJ3in-3at1L8zFApM4nA8&code_challenge_method=S256&nonce=0OerF89cvZwHbnSJ9bQzxJj9FTFFFzH4FSkpHqvlhpAsYQ5luwTruKJz5cqfiZnk&redirect_uri=https%3A%2F%2Fdev-62209633.okta.com%2Fenduser%2Fcallback&response_type=code&state=QicJFWnMk9IwZSlBnLdLn02E6ZSOAVMp83DMqAVH6wXZ4Ogpgpi6SCEFRAESyZvI&scope=openid%20profile%20email%20okta.users.read.self%20okta.users.manage.self%20okta.internal.enduser.read%20okta.internal.enduser.manage
        '''
        code_challenge = 'MAa1GuXQ3EKY99Qot-NTOUnJ3in-3at1L8zFApM4nA8'
        challenge_method = 'S256'
        scope = 'profile email'
        scope += ' openid' if self.openid else ''
        scope_encoded = quote_plus(scope)
        state = 'predictable'
        nonce = 'also_something_predictable'
        redirect_uri = 'http://localhost:1337'
        
        url = request_builder(
                    self.authorization_endpoint, 
                    self.clientid, 
                    redirect_uri, 
                    nonce, 
                    state,
                    challenge_method,
                    code_challenge,
                    scope_encoded)
        
        
        construct_keycloak_cookie(url)
        # construct_cassdoor_cookie(url)
        self.auth_cookie = read_key_from_config('keycloak_cookie') 
        print(url)
        
        r = requests.get(url, cookies=self.auth_cookie)
       
        new_url = request_builder(
                    self.authorization_endpoint, 
                    self.clientid, 
                    redirect_uri, 
                    nonce, 
                    state,
                    'plaintext',
                    '',
                    scope_encoded)
             
        r_new = requests.get(new_url, cookies=self.auth_cookie)
        d = check_responses(r,r_new)
        equal_key = True if 'equals' in d else False
        if d["status_code"] != True:
            reporter.error('Downgrade Attacks are not applicable')
        elif equal_key:
            if self.openid == True:
                reporter.debug('OpenID PKCE Downgrade Attacks are applicable')
            else:
                reporter.debug('OAuth PKCE Downgrade Attacks are applicable')
        else: # if status code matches, require a login to intercept the cookies
            reporter.error('Downgrade Attacks are not applicable...')

    def codeReplayScan(self):
        # Only applicable in auth_code grant type
        # required fields (client_id/client_secret and authorization_code)
        '''Scan for authorization code replay issues on token requests for OAUTHv2 and OpenID Authorization Code and Hybrid Flows'''

        client_secret = self.settings['client_secret']
        redirect_uri = 'http://localhost:1337'
        
        #TODO: add a process to get automatically the auth code
        auth_code = 'c58d76e8-716d-4024-9870-bfa13dc5f0bd.aefe3e6e-d3a7-4208-ade4-1de04bd0ba47.72ed3982-19d9-4c46-bdf9-57a936eb9d68'
        payload = f"code={auth_code}&client_id={self.clientid}&client_secret={client_secret}&redirect_uri={redirect_uri}&grant_type=authorization_code"
        headers = {'content-type': "application/x-www-form-urlencoded"}
        print(self.token_endpoint)
        print(payload)

        first_response = requests.request("POST", self.token_endpoint, data=payload, headers=headers)
        second_response = requests.request("POST", self.token_endpoint, data=payload, headers=headers)
        
        r = check_responses(first_response, second_response)
        if first_response.ok or second_response.ok:
            if r["status_code"] != True:
                reporter.error("Replay Attacks - Not vulnerable ")
            else:
                if r["equals"] == True:
                    reporter.debug("Replay Attacks - Vulnerability detected")
                else:
                    reporter.info("Replay Attacks - Needs further investigation")
        else:
            reporter.error("Replay Attacks - Invalid code or wrong input")

        
        pass

    def scopeScan(self):
        '''Scan for improper input validation issues of 'scope' parameter in token requests'''
        '''use "test" attribute as one untrusted'''
        '''TODO : also could have to test the list from scopes from (config) and to inform that client has access to everything!'''

        # try a new scope that is not defined "phone"
        # 3anastelneis ena auth code request gia na apokthseis ena neo code kai pros8eteis ena malicious scope
        # sto token request (privilege escalation)
        
        scope = 'profile email test'
        scope += ' openid' if self.openid else ''
        scope_encoded = quote_plus(scope)
        redirect_uri = 'http://localhost:1337'
        
        url = request_builder(
                    self.authorization_endpoint, 
                    self.clientid, 
                    redirect_uri, 
                    '', 
                    '',
                    '',
                    '',
                    scope_encoded)
        
        reporter.info("Scope scan : Emulate a user's action and get the cookie to proceed")
        self.auth_cookie = read_key_from_config('keycloak_cookie') 

        reporter.info("Scope scan : Try to grab a new auth code...")
        r = requests.get(url, cookies=self.auth_cookie)
        reporter.info("Scope scan : Check the malicious client output...")
        
        #add a minor timeout to ensure that call client managed to update the config file
        reporter.info("Wait for the record to be updated...")
        sleep(1)
        # read from file
        auth_code = read_key_from_config("extracted_code")
        if auth_code is None:
            reporter.error("Unable to track a valid auth code")
            return
        else: 
            remove_key_from_conf("extracted_code")
            reporter.debug("auth code retrieved successfully")
            
        client_secret = self.settings['client_secret']
        redirect_uri = 'http://localhost:1337'
        payload = f"code={auth_code}&client_id={self.clientid}&client_secret={client_secret}&redirect_uri={redirect_uri}&grant_type=authorization_code"
        headers = {'content-type': "application/x-www-form-urlencoded"}
        
        reporter.info("Scope scan : Try to exchange to an access token...")
        resp = requests.request("POST", self.token_endpoint, data=payload, headers=headers)
        if resp.ok:
            if self.openid:
                reporter.debug("Scope scan: OpenID improperly validates the scope attributes!")
            else:
                reporter.debug("Scope scan: OAuth2 improperly validates the scope attributes!")
    
        pass

    def nonceScan(self):
        '''Scan for nonce duplicate replay and nonce not controlled issues for the requests of all OpenID Flows'''
        # TODO: na tsekaroume ola ta diaforetika status sta response types sta diaforetika requests
        
        if self.openid:
            
            scope = 'profile email'
            scope += ' openid' if self.openid else ''
            scope_encoded = quote_plus(scope)
            state= f'123456'
            nonce= f'something_expected'
            redirect_uri = 'http://localhost:1337/'
                        
            url1 = request_builder(
                        self.authorization_endpoint, 
                        self.clientid, 
                        redirect_uri, 
                        nonce, 
                        state,
                        '',
                        '',
                        scope_encoded)
            
            construct_keycloak_cookie(url1)
            self.auth_cookie = read_key_from_config('keycloak_cookie') 
            
            r1 = requests.get(url1, cookies=self.auth_cookie)
            r2 = requests.get(url1, cookies=self.auth_cookie)
            
            d = check_responses(r1,r2)
            equal_key = True if 'equals' in d else False
            if d["status_code"] == True:
                if equal_key:
                    reporter.debug("Nonce Replay Scan - OpenId Flow allows the nonce resusage")
                else:
                    reporter.info("Nonce Replay Scan - Needs further investigation")
            else:
                reporter.error("Nonce Replay Scan - Not vulnerable")

            url2 = request_builder(
                        self.authorization_endpoint, 
                        self.clientid, 
                        redirect_uri, 
                        '', 
                        state,
                        '',
                        '',
                        scope_encoded)
            
            r3 = requests.get(url2, cookies=self.auth_cookie)
            
            d1 = check_responses(r1,r3)
            equal_key = True if 'equals' in d1 else False
            if d1["status_code"] == True:
                if equal_key:
                    reporter.debug("Nonce Server Scan - Nonce Parameter is NOT Evaluated!")
                else:
                    reporter.info("Nonce Server Scan - Needs further investigation")
            else:
                reporter.error("Nonce Server Scan - Nonce Parameter is Evaluated")
            
        pass

    '''@main'''
    def active_scan(self):
        '''Start Active Scan for each OAUTHv2/OpenID vulnerability and common misconfiguration'''
        # authcode = OAuthCode(self.settings)
        # authcode.client_enumeration()
        
        self.pkceScan()
        self.codeReplayScan()
        self.nonceScan()
        self.scopeScan()
        self.openRedirectScan()
        